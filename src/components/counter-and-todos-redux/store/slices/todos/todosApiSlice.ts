import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

import { Todo } from "@/types";

// API slice
export const todosApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:3001/" }),
  reducerPath: "todosApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Todos"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `TodosApiResponse`) and the expected query argument type (in this case `number`). If there is no argument, use `void` for the argument type instead.
    // Get all Todo IDs
    getTodoIds: build.query<string[], void>({
      query: () => "todos",
      // Manipulate the response data before it's returned and cached
      transformResponse: (response: Todo[]) => {
        const todoIds = response.map((todo: { id: string }) => todo.id);
        return todoIds;
      },
      // `providesTags` determines which 'tag' is attached to the cached data returned by the query.
      providesTags: ["Todos"],
    }),

    // Get a specific Todo by ID
    getTodo: build.query<Todo, string>({
      query: (id) => `todos/${id}`,
      providesTags: (result, error, id) => [{ type: "Todos", id }],
    }),

    // Create a new Todo
    createTodo: build.mutation<Todo, Todo>({
      query: (newTodo) => ({
        url: "todos",
        method: "POST",
        body: newTodo,
      }),
      // After successful mutation, invalidate queries to refetch data
      onQueryStarted: async (_, { dispatch, queryFulfilled }) => {
        await queryFulfilled;
        dispatch(todosApiSlice.util.invalidateTags([{ type: "Todos" }]));
      },
    }),

    // Update a Todo
    updateTodo: build.mutation<Todo, Todo>({
      query: (updatedTodo) => ({
        url: `todos/${updatedTodo.id}`,
        method: "PUT",
        body: updatedTodo,
      }),
      onQueryStarted: async (updatedTodo, { dispatch, queryFulfilled }) => {
        await queryFulfilled;
        dispatch(
          todosApiSlice.util.invalidateTags([
            { type: "Todos", id: updatedTodo.id },
          ])
        );
      },
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `todosApiSlice.endpoints.getQuotes.useQuery`
export const {
  useGetTodoIdsQuery,
  useGetTodoQuery,
  useCreateTodoMutation,
  useUpdateTodoMutation,
} = todosApiSlice;
